"""–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–∞–º–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ Markdown."""

import json
from datetime import datetime
from pathlib import Path
from typing import Any

from formatters.json import create_json_dump
from formatters.markdown import create_markdown_report
from schemas.readwise import ReadwiseDocument


def create_reports(
    *,
    all_docs: list[ReadwiseDocument],
    dir: str,
):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –¥–ª—è –∫–∞–∂–¥–æ–≥–æ location –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–∞–º–∏,
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ location –¥–æ–∫—É–º–µ–Ω—Ç–∞.

    :param all_docs: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise
    :param dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
    :return: None
    """
    locations = [
        "later",
        "new",
        "archive",
        "shortlist",
    ]
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ location
    for location in locations:
        print(f"üöÄ –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –¥–ª—è '{location}'...")
        documents: list[ReadwiseDocument] = [
            doc for doc in all_docs if doc.location == location
        ]

        report = create_markdown_report(
            documents=documents,
            location=location,
            # –î–æ–±–∞–≤–ª—è–µ–º summary —Ç–æ–ª—å–∫–æ –¥–ª—è 'later' - –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤,
            # –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é
            add_summary=True if location == "later" else False,
        )

        filename = f"{location}.md"
        filepath = Path(dir) / filename
        filepath.parent.mkdir(parents=True, exist_ok=True)
        with open(filepath, "w") as f:
            f.write(report)
        print(f"‚úÖ –û—Ç—á–µ—Ç '{location}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{filepath}'")

    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è —Ç–µ–≥–æ–≤
    all_tags = get_tags(documents=all_docs)
    for tag in all_tags:
        print(f"üìå –¢–µ–≥: {tag}")
        tagged_documents = get_documents_by_tag(
            documents=all_docs,
            tag=tag,
        )
        report = create_markdown_report(
            documents=tagged_documents,
            location=tag,
            add_summary=True,
        )
        filename = f"{tag}.md"
        filepath = Path(dir + "/tags") / filename
        filepath.parent.mkdir(parents=True, exist_ok=True)
        with open(filepath, "w") as f:
            f.write(report)
        print(f"‚úÖ –û—Ç—á–µ—Ç –¥–ª—è —Ç–µ–≥–∞ '{tag}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{filepath}'")


def dump_docs_to_json(
    *,
    all_docs: list[ReadwiseDocument],
    dir: str,
):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∞–º–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    –≤ —Ñ–∞–π–ª articles.json.

    :param all_docs: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise
    :param dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–º–ø–∞
    :return: None
    """
    print("üöÄ –î–µ–ª–∞—é –º–∞–ø—É...")
    hashmap = {}
    for doc in all_docs:
        hashmap[doc.id] = doc.model_dump()

    print("üöÄ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏ highlights –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º...")
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–º–µ—Ç–∫–∏ –∫ highlight'–∞–º
    for doc in all_docs:
        if doc.category == "note":
            if doc.parent_id not in hashmap.keys():
                print(f"    –ù–µ—Ç –¥–æ–∫–∞ —Å id={doc.parent_id}")
                print(f"        –ó–∞–º–µ—Ç–∫–∞: {doc.id=} {doc.content}")
                continue

            if not hashmap[doc.parent_id].get("notes_attached", None):
                hashmap[doc.parent_id]["notes_attached"] = [doc.model_dump()]
            else:
                hashmap[doc.parent_id]["notes_attached"].append(doc.model_dump())
            print(
                f"        ‚úÖ –ó–∞–º–µ—Ç–∫–∞: '{doc.content}' –∫ '{hashmap[doc.parent_id]["content"]}'"
            )
    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º highlights –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: –±–µ—Ä–µ–º –∏—Ö –∏–∑ —Ö–∞—à–º–∞–ø—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º
    # highlights —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –∫ –Ω–∏–º
    for doc_id in hashmap.keys():
        doc = hashmap[doc_id]
        if doc["category"] == "highlight":
            if doc["parent_id"] not in hashmap.keys():
                print(f"    –ù–µ—Ç –¥–æ–∫–∞ —Å id={doc["parent_id"]}")
                print(f"        Highlight: {doc["id"]=} {doc["content"]}")
                continue

            if not hashmap[doc["parent_id"]].get("highlights", None):
                hashmap[doc["parent_id"]]["highlights"] = [doc]
            else:
                hashmap[doc["parent_id"]]["highlights"].append(doc)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
    root_docs = []
    for doc_id in hashmap.keys():
        doc = hashmap[doc_id]
        has_no_parent = doc["parent_id"] is None
        if has_no_parent:
            root_docs.append(doc)

    # –î–µ–ª–∞–µ–º –¥–∞–º–ø –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª JSON
    def datetime_serializer(obj: Any) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç."""
        if isinstance(obj, datetime):
            return obj.isoformat()
        raise TypeError(f"–¢–∏–ø {type(obj)} –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º")

    res = json.dumps(
        root_docs,
        ensure_ascii=False,
        indent=4,
        default=datetime_serializer,
    )

    filepath = Path(dir) / "articles.json"
    filepath.parent.mkdir(parents=True, exist_ok=True)
    with open(filepath, "w") as f:
        f.write(res)

    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(root_docs)} –¥–æ–∫. –≤ '{filepath}'")


def get_tags(
    *,
    documents: list[ReadwiseDocument],
) -> set[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

    :param documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise
    :return: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
    """
    tags = set()
    for doc in documents:
        if doc.tags:
            tags.update(doc.tags.keys())
    return tags


def get_documents_by_tag(
    *,
    documents: list[ReadwiseDocument],
    tag: str,
) -> list[ReadwiseDocument]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É.

    :param documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise
    :param tag: –¢–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    :return: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥
    """
    return [doc for doc in documents if doc.tags and tag in doc.tags]


def save_as_json(
    *,
    documents: list[ReadwiseDocument],
    filepath: Path,
):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É
    –ø—É—Ç–∏.

    :param documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Readwise
    :param filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON
    """
    result = create_json_dump(documents=documents)
    with open(filepath, "w") as f:
        f.write(result)
