"""
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Readwise.
"""

from time import sleep

import requests
import urllib3
from schemas.readwise import ReadwiseDocument, ReadwiseDocumentList


def fetch_reader_document_list_api(
    *,
    token: str,
    updated_after=None,
    location: str | None = None,
    category: str | None = None,
    with_html_content: bool = False,
) -> list[ReadwiseDocument]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ API Readwise.

    :param token: API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Readwise
    :param updated_after: –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    :param location: –õ–æ–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (new, later, shortlist, archive)
    :return: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    full_data: list[ReadwiseDocument] = []
    next_page_cursor = None

    urllib3.disable_warnings()

    params = {}
    if updated_after:
        params["updatedAfter"] = updated_after
    if location:
        params["location"] = location
    if category:
        params["category"] = category
    if with_html_content:
        params["withHtmlContent"] = "true"

    while True:
        if next_page_cursor:
            params["pageCursor"] = next_page_cursor

        print("    ‚è≥ –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ " + str(params) + "...")

        response = requests.get(
            url="https://readwise.io/api/v3/list/",
            params=params,
            headers={"Authorization": f"Token {token}"},
            verify=False,
        )

        try:
            res = ReadwiseDocumentList(**response.json())
            full_data.extend(res.results)
            got = len(full_data)
            total = response.json().get("count")
            print(f"    üì• –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {got} —à—Ç., –æ—Å—Ç–∞–ª–æ—Å—å: {total} —à—Ç.")
        except KeyError:
            print("Error: " + str(response.json()))
            break

        next_page_cursor = response.json().get("nextPageCursor")
        sleep(3)  # Rate limiting

        if not next_page_cursor:
            break
    return full_data
